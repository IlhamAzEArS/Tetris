using System;
using System.Drawing;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;

class SnaceP
{
    protected int Speed = 50;
    protected bool alive = true;
    protected bool Food = false;
    protected int FoodX = 0;
    protected int FoodY = 0;
    private string ControL = "right";
    protected int score = 0;
    protected int x = 20;
    protected int y = 20;
    //private void Form1_MouseMove(object sender, MouseEventArgs e)
    //{
    //    Point p = e.Location;
    //    label1.Text = p.X.ToString() + " " + p.Y.ToString();
    //}
    protected void GameOver()
    {

        ConsoleColor[] colors = (ConsoleColor[])ConsoleColor.GetValues(typeof(ConsoleColor));

        for (int i = 0; i < 1; i++)
        {
            foreach (var color in colors)
            {
                Console.SetCursorPosition(50, 38);
                Console.ForegroundColor = color;
                Console.Clear();
                Console.WriteLine("\n\n\n\n\n");
                Console.WriteLine("\n                       Game over :(");
                Console.WriteLine("\n\n                   Your score was: {0} !", score);
                System.Threading.Thread.Sleep(100);
            }
        }
        Thread.Sleep(1000);
        Console.WriteLine("\n\n\n\n\n\n             -- Press Any Key To Continue --");
        Thread.Sleep(500);
        Console.ReadKey(true);
        Console.ReadKey(true);

    }
    protected void ControL_Snace()
    {
        if (Console.KeyAvailable)
        {
            ConsoleKeyInfo key = Console.ReadKey(true);
            switch (key.Key)
            {
                case ConsoleKey.RightArrow:
                    if (ControL != "left")
                    {
                        ControL = "right";
                    }
                    break;
                case ConsoleKey.LeftArrow:
                    if (ControL != "right")
                    {
                        ControL = "left";
                    }
                    break;
                case ConsoleKey.UpArrow:

                    if (ControL != "down")
                    {
                        ControL = "up";
                    }
                    break;
                case ConsoleKey.DownArrow:

                    if (ControL != "up")
                    {
                        ControL = "down";
                    }
                    break;
                default:
                    break;
            }
        }

        if (this.ControL == "right")
        {
            this.x += 1;
        }
        else if (this.ControL == "left")
        {
            this.x -= 1;
        }
        else if (this.ControL == "down")
        {
            this.y += 1;
        }
        else if (this.ControL == "up")
        {
            this.y -= 1;
        }
    }

}
class Snace : SnaceP
{

    private int snakeLength = 8;
    private int ColoR123 = 0;
    private int[] SnaceX;
    private int[] SnaceY;
    private Random rnd = new Random();
    public Snace()
    {
        this.SnaceX = new int[8] { 20, 19, 18, 17, 16, 15, 14, 13 };
        this.SnaceY = new int[8] { 20, 20, 20, 20, 20, 20, 20, 20 };
    }

    public void SnacE(ConsoleColor bgColor, ConsoleColor fgColor)
    {

        while (this.alive)
        {
            if (this.Food == false)
            {
                bool collide = false;
                this.Food = true;
                this.FoodX = this.rnd.Next(4, Console.WindowWidth - 4);
                this.FoodY = this.rnd.Next(4, Console.WindowHeight - 4);

                for (int l = (this.SnaceX.Length - 1); l > 1; l--)
                {
                    if (this.SnaceX[l] == this.FoodX & this.SnaceY[l] == this.FoodY)
                    {
                        collide = true;
                    }
                }
                if (collide == true)
                {
                    this.Food = false;
                    break;
                }
                else
                {
                    Console.SetCursorPosition(FoodX, FoodY);
                    Console.ForegroundColor = ConsoleColor.Cyan;
                    Console.BackgroundColor = bgColor;
                    Console.Write("â˜º");
                    this.Food = true;
                }

            }
            Array.Resize<int>(ref SnaceX, snakeLength);//new array size 
            Array.Resize<int>(ref SnaceY, snakeLength);//new array size 

            System.Threading.Thread.Sleep(Speed);
            ColoR123++;
            ControL_Snace();

            this.SnaceX[0] = x;
            this.SnaceY[0] = y;

            for (int l = (this.SnaceX.Length - 1); l > 0; l--)
            {
                this.SnaceX[l] = this.SnaceX[l - 1];
                this.SnaceY[l] = this.SnaceY[l - 1];
            }


            try
            {
                Console.SetCursorPosition(this.SnaceX[0], this.SnaceY[0]);
            }
            catch (System.ArgumentOutOfRangeException)
            {
                this.GameOver();
                return;
            }
            if (this.ColoR123 == 2)
            {
                Console.BackgroundColor = ConsoleColor.White;
            }
            else if (this.ColoR123 == 3)
            {

                Console.BackgroundColor = ConsoleColor.Magenta;
            }
            else if (this.ColoR123 == 4)
            {

                Console.BackgroundColor = ConsoleColor.Green;
            }
            else
            {
                this.ColoR123 = 1;
                Console.BackgroundColor = ConsoleColor.Red;
            }
            Console.ForegroundColor = fgColor;
            Console.Write(" ");

            try
            {
                Console.SetCursorPosition(SnaceX[SnaceX.Length - 1], this.SnaceY[this.SnaceY.Length - 1]);
            }
            catch (System.ArgumentOutOfRangeException)
            {
                this.alive = false;
            }
            Console.BackgroundColor = bgColor;
            Console.Write(" ");

            if (x == FoodX & y == FoodY)
            {
                this.Food = false;
                snakeLength += 30;
                //Speed -= Speed / 8;
                new Thread(() => Console.Beep(320, 250)).Start();
            }

            for (int l = (this.SnaceX.Length - 1); l > 1; l--)
            {
                if (this.SnaceX[l] == this.SnaceX[0] & this.SnaceY[l] == this.SnaceY[0])
                {
                    this.alive = false;
                }

            }
            this.score = ((snakeLength) - 8);
            Console.SetCursorPosition(2, 2);
            Console.ForegroundColor = ConsoleColor.White;
            Console.BackgroundColor = ConsoleColor.Black;
            Console.Write("Score: {0} ", score);

        }
    }

}
namespace ConsoleGraphics
{
    class Program
    {
        static void Main(string[] args)
        {
            {
            game:
                Console.CursorVisible = (false);
                Console.Title = "Snace!";
                Snace Start = new Snace();
                Console.SetWindowSize(50, 38);
                //consul size 
                Console.SetBufferSize(Console.WindowWidth, Console.WindowHeight);
                Console.ForegroundColor = ConsoleColor.Red;
                Console.BackgroundColor = ConsoleColor.Black;
                Console.Clear();
                ConsoleColor bgColor = Console.BackgroundColor;
                ConsoleColor fgColor = Console.ForegroundColor;
                Start.SnacE(Console.BackgroundColor, Console.ForegroundColor);
                new Thread(() => Console.Beep(37, 1)).Start();
                Console.BackgroundColor = ConsoleColor.Black;
                Console.Clear();
                Console.Beep(785, 250);
                goto game;
            }
        }
    }
}

